version: 1
applications:
  - appRoot: .
    frontend:
      phases:
        preBuild:
          commands:
            - echo "Installing pnpm..."
            - npm install -g pnpm@latest
            - echo "Installing dependencies..."
            - pnpm install --frozen-lockfile
            - echo "Setting up environment..."
            - export NODE_ENV=production
        build:
          commands:
            - echo "Building Next.js application..."
            - pnpm build
            - echo "Copying additional files to standalone..."
            - cp -r public .next/standalone/
            - cp -r .next/static .next/standalone/.next/
            - cp .next/trace .next/standalone/
            - if [ -f .next/required-server-files.json ]; then cp .next/required-server-files.json .next/standalone/; fi
            - if [ -f .next/images-manifest.json ]; then cp .next/images-manifest.json .next/standalone/; fi
            - if [ -f .next/next-server.js.nft.json ]; then cp .next/next-server.js.nft.json .next/standalone/; fi
            - if [ -f .next/next-minimal-server.js.nft.json ]; then cp .next/next-minimal-server.js.nft.json .next/standalone/; fi
            - echo "Build completed successfully"
        postBuild:
          commands:
            - echo "Build completed successfully"
            - echo "Checking if database needs initialization..."
            # Attention: After the first deployment, you need to manually access the /seed endpoint to initialize the database
            # Or add an automation script here
      artifacts:
        baseDirectory: .next/standalone
        files:
          - '.next/**'
          - '**/*'
      cache:
        paths:
          - node_modules/**/*
          - .next/cache/**/*
          - .pnpm-store/**/*
    backend:
      phases:
        build:
          commands:
            - echo "No backend build required"
